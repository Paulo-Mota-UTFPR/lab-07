ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	hadc1
  20              		.section	.bss.hadc1,"aw",%nobits
  21              		.align	2
  24              	hadc1:
  25 0000 00000000 		.space	72
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	hcrc
  27              		.section	.bss.hcrc,"aw",%nobits
  28              		.align	2
  31              	hcrc:
  32 0000 00000000 		.space	8
  32      00000000 
  33              		.global	htim4
  34              		.section	.bss.htim4,"aw",%nobits
  35              		.align	2
  38              	htim4:
  39 0000 00000000 		.space	72
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	gUSBRxBuffer
  41              		.section	.bss.gUSBRxBuffer,"aw",%nobits
  42              		.align	2
  45              	gUSBRxBuffer:
  46 0000 00000000 		.space	1020
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	__aeabi_ui2d
  48              		.global	__aeabi_dmul
  49              		.global	__aeabi_d2f
  50              		.section	.text.ajuste.0,"ax",%progbits
  51              		.align	1
  52              		.syntax unified
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 2


  53              		.thumb
  54              		.thumb_func
  56              	ajuste.0:
  57              	.LFB221:
  58              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "usb_device.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** CRC_HandleTypeDef hcrc;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** int gUSBRxBuffer[255];
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 3


  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** static void MX_GPIO_Init(void);
  59:Core/Src/main.c **** static void MX_ADC1_Init(void);
  60:Core/Src/main.c **** static void MX_CRC_Init(void);
  61:Core/Src/main.c **** static void MX_TIM4_Init(void);
  62:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  63:Core/Src/main.c **** static void ADC1_Set_Channel(uint32_t channel);
  64:Core/Src/main.c **** /* USER CODE END PFP */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  67:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  68:Core/Src/main.c **** /* USER CODE END 0 */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /**
  71:Core/Src/main.c ****   * @brief  The application entry point.
  72:Core/Src/main.c ****   * @retval int
  73:Core/Src/main.c ****   */
  74:Core/Src/main.c **** int main(void)
  75:Core/Src/main.c **** {
  76:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  77:Core/Src/main.c ****   int i=0;
  78:Core/Src/main.c ****   int a;
  79:Core/Src/main.c ****   int contagem=0;
  80:Core/Src/main.c ****   int read[1];
  81:Core/Src/main.c ****   int string[255];
  82:Core/Src/main.c ****   int count=0;
  83:Core/Src/main.c ****   int comando[5]; 
  84:Core/Src/main.c ****   int d = 6000000;
  85:Core/Src/main.c ****   /* USER CODE END 1 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  90:Core/Src/main.c ****   HAL_Init();
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END Init */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Configure the system clock */
  97:Core/Src/main.c ****   SystemClock_Config();
  98:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* Initialize all configured peripherals */
 103:Core/Src/main.c ****   MX_GPIO_Init();
 104:Core/Src/main.c ****   MX_ADC1_Init();
 105:Core/Src/main.c ****   MX_CRC_Init();
 106:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 107:Core/Src/main.c ****   MX_TIM4_Init();
 108:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 109:Core/Src/main.c **** HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 4


 110:Core/Src/main.c **** HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   void ajuste(int ref){
  59              		.loc 1 114 23
  60              		.cfi_startproc
  61              		@ Nested: function declared inside another function.
  62              		@ args = 0, pretend = 0, frame = 16
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 90B5     		push	{r4, r7, lr}
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 12
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 85B0     		sub	sp, sp, #20
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 32
  73 0004 00AF     		add	r7, sp, #0
  74              	.LCFI2:
  75              		.cfi_def_cfa_register 7
  76 0006 7860     		str	r0, [r7, #4]
  77 0008 6446     		mov	r4, ip
  78 000a C7F800C0 		str	ip, [r7]
 115:Core/Src/main.c ****     float incremento_pct = d * 0.0625f;
  79              		.loc 1 115 30
  80 000e 6368     		ldr	r3, [r4, #4]
  81 0010 07EE903A 		vmov	s15, r3	@ int
  82 0014 F8EEE77A 		vcvt.f32.s32	s15, s15
  83              		.loc 1 115 11
  84 0018 9FED3F7A 		vldr.32	s14, .L9
  85 001c 67EE877A 		vmul.f32	s15, s15, s14
  86 0020 C7ED037A 		vstr.32	s15, [r7, #12]
 116:Core/Src/main.c ****     // Incrementar d
 117:Core/Src/main.c ****     d += incremento_pct;
  87              		.loc 1 117 7
  88 0024 6368     		ldr	r3, [r4, #4]
  89 0026 07EE903A 		vmov	s15, r3	@ int
  90 002a B8EEE77A 		vcvt.f32.s32	s14, s15
  91 002e D7ED037A 		vldr.32	s15, [r7, #12]
  92 0032 77EE277A 		vadd.f32	s15, s14, s15
  93 0036 FDEEE77A 		vcvt.s32.f32	s15, s15
  94 003a 17EE903A 		vmov	r3, s15	@ int
  95 003e 6360     		str	r3, [r4, #4]
 118:Core/Src/main.c ****      float incremento = htim4.Instance->ARR * 0.0625;
  96              		.loc 1 118 30
  97 0040 364B     		ldr	r3, .L9+4
  98 0042 1B68     		ldr	r3, [r3]
  99              		.loc 1 118 39
 100 0044 DB6A     		ldr	r3, [r3, #44]
 101              		.loc 1 118 45
 102 0046 1846     		mov	r0, r3
 103 0048 FFF7FEFF 		bl	__aeabi_ui2d
 104 004c 4FF00002 		mov	r2, #0
 105 0050 334B     		ldr	r3, .L9+8
 106 0052 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 5


 107 0056 0246     		mov	r2, r0
 108 0058 0B46     		mov	r3, r1
 109              		.loc 1 118 12
 110 005a 1046     		mov	r0, r2
 111 005c 1946     		mov	r1, r3
 112 005e FFF7FEFF 		bl	__aeabi_d2f
 113 0062 0346     		mov	r3, r0	@ float
 114 0064 BB60     		str	r3, [r7, #8]	@ float
 119:Core/Src/main.c ****      if (ref > 0) { // Aumenta o brilho
 115              		.loc 1 119 9
 116 0066 7B68     		ldr	r3, [r7, #4]
 117 0068 002B     		cmp	r3, #0
 118 006a 2ADD     		ble	.L2
 120:Core/Src/main.c ****         if (htim4.Instance->CCR2 + incremento <= htim4.Instance->ARR) {
 119              		.loc 1 120 18
 120 006c 2B4B     		ldr	r3, .L9+4
 121 006e 1B68     		ldr	r3, [r3]
 122              		.loc 1 120 27
 123 0070 9B6B     		ldr	r3, [r3, #56]
 124              		.loc 1 120 34
 125 0072 07EE903A 		vmov	s15, r3	@ int
 126 0076 B8EE677A 		vcvt.f32.u32	s14, s15
 127 007a D7ED027A 		vldr.32	s15, [r7, #8]
 128 007e 37EE277A 		vadd.f32	s14, s14, s15
 129              		.loc 1 120 55
 130 0082 264B     		ldr	r3, .L9+4
 131 0084 1B68     		ldr	r3, [r3]
 132              		.loc 1 120 64
 133 0086 DB6A     		ldr	r3, [r3, #44]
 134              		.loc 1 120 47
 135 0088 07EE903A 		vmov	s15, r3	@ int
 136 008c F8EE677A 		vcvt.f32.u32	s15, s15
 137              		.loc 1 120 12
 138 0090 B4EEE77A 		vcmpe.f32	s14, s15
 139 0094 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 140 0098 00D9     		bls	.L6
 121:Core/Src/main.c ****           a+=incremento;
 122:Core/Src/main.c ****             htim4.Instance->CCR2 = a;
 123:Core/Src/main.c ****         }
 124:Core/Src/main.c ****     } else if (ref < 0) { // Diminui o brilho
 125:Core/Src/main.c ****         if (htim4.Instance->CCR2 - incremento >= 0) {
 126:Core/Src/main.c ****           a-=incremento;
 127:Core/Src/main.c ****             htim4.Instance->CCR2 =a;
 128:Core/Src/main.c ****         }
 129:Core/Src/main.c ****     }
 130:Core/Src/main.c ****   }
 141              		.loc 1 130 3
 142 009a 38E0     		b	.L8
 143              	.L6:
 121:Core/Src/main.c ****           a+=incremento;
 144              		.loc 1 121 12
 145 009c 2368     		ldr	r3, [r4]
 146 009e 07EE903A 		vmov	s15, r3	@ int
 147 00a2 B8EEE77A 		vcvt.f32.s32	s14, s15
 148 00a6 D7ED027A 		vldr.32	s15, [r7, #8]
 149 00aa 77EE277A 		vadd.f32	s15, s14, s15
 150 00ae FDEEE77A 		vcvt.s32.f32	s15, s15
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 6


 151 00b2 17EE903A 		vmov	r3, s15	@ int
 152 00b6 2360     		str	r3, [r4]
 122:Core/Src/main.c ****         }
 153              		.loc 1 122 18
 154 00b8 184B     		ldr	r3, .L9+4
 155 00ba 1B68     		ldr	r3, [r3]
 122:Core/Src/main.c ****         }
 156              		.loc 1 122 34
 157 00bc 2268     		ldr	r2, [r4]
 158 00be 9A63     		str	r2, [r3, #56]
 159              		.loc 1 130 3
 160 00c0 25E0     		b	.L8
 161              	.L2:
 124:Core/Src/main.c ****         if (htim4.Instance->CCR2 - incremento >= 0) {
 162              		.loc 1 124 15
 163 00c2 7B68     		ldr	r3, [r7, #4]
 164 00c4 002B     		cmp	r3, #0
 165 00c6 22DA     		bge	.L8
 125:Core/Src/main.c ****           a-=incremento;
 166              		.loc 1 125 18
 167 00c8 144B     		ldr	r3, .L9+4
 168 00ca 1B68     		ldr	r3, [r3]
 125:Core/Src/main.c ****           a-=incremento;
 169              		.loc 1 125 27
 170 00cc 9B6B     		ldr	r3, [r3, #56]
 125:Core/Src/main.c ****           a-=incremento;
 171              		.loc 1 125 34
 172 00ce 07EE903A 		vmov	s15, r3	@ int
 173 00d2 B8EE677A 		vcvt.f32.u32	s14, s15
 174 00d6 D7ED027A 		vldr.32	s15, [r7, #8]
 175 00da 77EE677A 		vsub.f32	s15, s14, s15
 125:Core/Src/main.c ****           a-=incremento;
 176              		.loc 1 125 12
 177 00de F5EEC07A 		vcmpe.f32	s15, #0
 178 00e2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 179 00e6 00DA     		bge	.L7
 180              		.loc 1 130 3
 181 00e8 11E0     		b	.L8
 182              	.L7:
 126:Core/Src/main.c ****             htim4.Instance->CCR2 =a;
 183              		.loc 1 126 12
 184 00ea 2368     		ldr	r3, [r4]
 185 00ec 07EE903A 		vmov	s15, r3	@ int
 186 00f0 B8EEE77A 		vcvt.f32.s32	s14, s15
 187 00f4 D7ED027A 		vldr.32	s15, [r7, #8]
 188 00f8 77EE677A 		vsub.f32	s15, s14, s15
 189 00fc FDEEE77A 		vcvt.s32.f32	s15, s15
 190 0100 17EE903A 		vmov	r3, s15	@ int
 191 0104 2360     		str	r3, [r4]
 127:Core/Src/main.c ****         }
 192              		.loc 1 127 18
 193 0106 054B     		ldr	r3, .L9+4
 194 0108 1B68     		ldr	r3, [r3]
 127:Core/Src/main.c ****         }
 195              		.loc 1 127 34
 196 010a 2268     		ldr	r2, [r4]
 197 010c 9A63     		str	r2, [r3, #56]
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 7


 198              	.L8:
 199              		.loc 1 130 3
 200 010e 00BF     		nop
 201 0110 1437     		adds	r7, r7, #20
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 12
 204 0112 BD46     		mov	sp, r7
 205              	.LCFI4:
 206              		.cfi_def_cfa_register 13
 207              		@ sp needed
 208 0114 90BD     		pop	{r4, r7, pc}
 209              	.L10:
 210 0116 00BF     		.align	2
 211              	.L9:
 212 0118 0000803D 		.word	1031798784
 213 011c 00000000 		.word	htim4
 214 0120 0000B03F 		.word	1068498944
 215              		.cfi_endproc
 216              	.LFE221:
 218              		.section	.rodata
 219              		.align	2
 220              	.LC0:
 221 0000 44696769 		.ascii	"Digite um comando\015\012\000"
 221      74652075 
 221      6D20636F 
 221      6D616E64 
 221      6F0D0A00 
 222              		.align	2
 223              	.LC1:
 224 0014 4F206475 		.ascii	"O duty cycle atual do PWM eh %d\015\012\000"
 224      74792063 
 224      79636C65 
 224      20617475 
 224      616C2064 
 225 0036 0000     		.align	2
 226              	.LC2:
 227 0038 4F207065 		.ascii	"O percentual do fundo de escala do A/D eh de %d.%02"
 227      7263656E 
 227      7475616C 
 227      20646F20 
 227      66756E64 
 228 006b 6425252C 		.ascii	"d%%, representando uma tensao de %d mV\015\012\000"
 228      20726570 
 228      72657365 
 228      6E74616E 
 228      646F2075 
 229              		.align	2
 230              	.LC3:
 231 0094 636F6D61 		.ascii	"comando nao reconhecido %d\015\012\000"
 231      6E646F20 
 231      6E616F20 
 231      7265636F 
 231      6E686563 
 232              		.section	.text.main,"ax",%progbits
 233              		.align	1
 234              		.global	main
 235              		.syntax unified
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 8


 236              		.thumb
 237              		.thumb_func
 239              	main:
 240              	.LFB220:
  75:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 241              		.loc 1 75 1
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 1088
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245 0000 80B5     		push	{r7, lr}
 246              	.LCFI5:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 ADF5896D 		sub	sp, sp, #1096
 251              	.LCFI6:
 252              		.cfi_def_cfa_offset 1104
 253 0006 02AF     		add	r7, sp, #8
 254              	.LCFI7:
 255              		.cfi_def_cfa 7, 1096
  74:Core/Src/main.c **** {
 256              		.loc 1 74 5
 257 0008 07F58963 		add	r3, r7, #1096
 258 000c C7F81C34 		str	r3, [r7, #1052]
  77:Core/Src/main.c ****   int a;
 259              		.loc 1 77 7
 260 0010 0023     		movs	r3, #0
 261 0012 C7F83C34 		str	r3, [r7, #1084]
  79:Core/Src/main.c ****   int read[1];
 262              		.loc 1 79 7
 263 0016 0023     		movs	r3, #0
 264 0018 C7F83834 		str	r3, [r7, #1080]
  82:Core/Src/main.c ****   int comando[5]; 
 265              		.loc 1 82 7
 266 001c 0023     		movs	r3, #0
 267 001e C7F83434 		str	r3, [r7, #1076]
  84:Core/Src/main.c ****   /* USER CODE END 1 */
 268              		.loc 1 84 7
 269 0022 984B     		ldr	r3, .L22
 270 0024 C7F81834 		str	r3, [r7, #1048]
  90:Core/Src/main.c **** 
 271              		.loc 1 90 3
 272 0028 FFF7FEFF 		bl	HAL_Init
  97:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 273              		.loc 1 97 3
 274 002c FFF7FEFF 		bl	SystemClock_Config
 103:Core/Src/main.c ****   MX_ADC1_Init();
 275              		.loc 1 103 3
 276 0030 FFF7FEFF 		bl	MX_GPIO_Init
 104:Core/Src/main.c ****   MX_CRC_Init();
 277              		.loc 1 104 3
 278 0034 FFF7FEFF 		bl	MX_ADC1_Init
 105:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 279              		.loc 1 105 3
 280 0038 FFF7FEFF 		bl	MX_CRC_Init
 106:Core/Src/main.c ****   MX_TIM4_Init();
 281              		.loc 1 106 3
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 9


 282 003c FFF7FEFF 		bl	MX_USB_DEVICE_Init
 107:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 283              		.loc 1 107 3
 284 0040 FFF7FEFF 		bl	MX_TIM4_Init
 109:Core/Src/main.c **** HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 285              		.loc 1 109 1
 286 0044 0021     		movs	r1, #0
 287 0046 9048     		ldr	r0, .L22+4
 288 0048 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 110:Core/Src/main.c **** 
 289              		.loc 1 110 1
 290 004c 0421     		movs	r1, #4
 291 004e 8E48     		ldr	r0, .L22+4
 292 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 293              	.L21:
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****     
 133:Core/Src/main.c ****   /* USER CODE END 2 */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* Infinite loop */
 136:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   while (1)
 140:Core/Src/main.c ****   {
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****     if (i==0){
 294              		.loc 1 142 8
 295 0054 D7F83C34 		ldr	r3, [r7, #1084]
 296 0058 002B     		cmp	r3, #0
 297 005a 16D1     		bne	.L12
 298              	.LBB4:
 143:Core/Src/main.c ****     sprintf(string, "Digite um comando\r\n");
 299              		.loc 1 143 5
 300 005c 07F11403 		add	r3, r7, #20
 301 0060 8A49     		ldr	r1, .L22+8
 302 0062 1846     		mov	r0, r3
 303 0064 FFF7FEFF 		bl	sprintf
 144:Core/Src/main.c ****    CDC_Transmit_FS(string,strlen(string));
 304              		.loc 1 144 4
 305 0068 07F11403 		add	r3, r7, #20
 306 006c 1846     		mov	r0, r3
 307 006e FFF7FEFF 		bl	strlen
 308 0072 0246     		mov	r2, r0
 309 0074 07F11403 		add	r3, r7, #20
 310 0078 1146     		mov	r1, r2
 311 007a 1846     		mov	r0, r3
 312 007c FFF7FEFF 		bl	CDC_Transmit_FS
 145:Core/Src/main.c ****     i++;
 313              		.loc 1 145 6
 314 0080 D7F83C34 		ldr	r3, [r7, #1084]
 315 0084 0133     		adds	r3, r3, #1
 316 0086 C7F83C34 		str	r3, [r7, #1084]
 317              	.L12:
 318              	.LBE4:
 146:Core/Src/main.c ****     }
 147:Core/Src/main.c ****    
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 10


 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****     if(gUSBRxBuffer[0]!=0){
 319              		.loc 1 149 20
 320 008a 814B     		ldr	r3, .L22+12
 321 008c 1B68     		ldr	r3, [r3]
 322              		.loc 1 149 7
 323 008e 002B     		cmp	r3, #0
 324 0090 E0D0     		beq	.L21
 150:Core/Src/main.c ****    
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****       switch (gUSBRxBuffer[0]){
 325              		.loc 1 152 27
 326 0092 7F4B     		ldr	r3, .L22+12
 327 0094 1B68     		ldr	r3, [r3]
 328              		.loc 1 152 7
 329 0096 732B     		cmp	r3, #115
 330 0098 0CD0     		beq	.L14
 331 009a 732B     		cmp	r3, #115
 332 009c 00F3D480 		bgt	.L15
 333 00a0 702B     		cmp	r3, #112
 334 00a2 44D0     		beq	.L16
 335 00a4 702B     		cmp	r3, #112
 336 00a6 00F3CF80 		bgt	.L15
 337 00aa 252B     		cmp	r3, #37
 338 00ac 3FD0     		beq	.L16
 339 00ae 642B     		cmp	r3, #100
 340 00b0 1ED0     		beq	.L17
 341 00b2 C9E0     		b	.L15
 342              	.L14:
 343              	.LBB5:
 153:Core/Src/main.c ****        
 154:Core/Src/main.c ****         case 115:
 155:Core/Src/main.c ****         {
 156:Core/Src/main.c ****           ajuste(1);
 344              		.loc 1 156 11
 345 00b4 07F21443 		addw	r3, r7, #1044
 346 00b8 9C46     		mov	ip, r3
 347 00ba 0120     		movs	r0, #1
 348 00bc FFF7FEFF 		bl	ajuste.0
 157:Core/Src/main.c ****           sprintf(string,"O duty cycle atual do PWM eh %d\r\n",d);
 349              		.loc 1 157 11
 350 00c0 D7F81824 		ldr	r2, [r7, #1048]
 351 00c4 07F11403 		add	r3, r7, #20
 352 00c8 7249     		ldr	r1, .L22+16
 353 00ca 1846     		mov	r0, r3
 354 00cc FFF7FEFF 		bl	sprintf
 158:Core/Src/main.c ****           CDC_Transmit_FS(string,strlen(string));
 355              		.loc 1 158 11
 356 00d0 07F11403 		add	r3, r7, #20
 357 00d4 1846     		mov	r0, r3
 358 00d6 FFF7FEFF 		bl	strlen
 359 00da 0246     		mov	r2, r0
 360 00dc 07F11403 		add	r3, r7, #20
 361 00e0 1146     		mov	r1, r2
 362 00e2 1846     		mov	r0, r3
 363 00e4 FFF7FEFF 		bl	CDC_Transmit_FS
 159:Core/Src/main.c ****           i=0;
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 11


 364              		.loc 1 159 12
 365 00e8 0023     		movs	r3, #0
 366 00ea C7F83C34 		str	r3, [r7, #1084]
 160:Core/Src/main.c ****           
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****           break;
 367              		.loc 1 162 11
 368 00ee C3E0     		b	.L18
 369              	.L17:
 370              	.LBE5:
 371              	.LBB6:
 163:Core/Src/main.c ****         }
 164:Core/Src/main.c ****         case 100:
 165:Core/Src/main.c ****         {
 166:Core/Src/main.c ****           ajuste(-1);
 372              		.loc 1 166 11
 373 00f0 07F21443 		addw	r3, r7, #1044
 374 00f4 9C46     		mov	ip, r3
 375 00f6 4FF0FF30 		mov	r0, #-1
 376 00fa FFF7FEFF 		bl	ajuste.0
 167:Core/Src/main.c ****           sprintf(string,"O duty cycle atual do PWM eh %d\r\n",d);
 377              		.loc 1 167 11
 378 00fe D7F81824 		ldr	r2, [r7, #1048]
 379 0102 07F11403 		add	r3, r7, #20
 380 0106 6349     		ldr	r1, .L22+16
 381 0108 1846     		mov	r0, r3
 382 010a FFF7FEFF 		bl	sprintf
 168:Core/Src/main.c ****           CDC_Transmit_FS(string,strlen(string));
 383              		.loc 1 168 11
 384 010e 07F11403 		add	r3, r7, #20
 385 0112 1846     		mov	r0, r3
 386 0114 FFF7FEFF 		bl	strlen
 387 0118 0246     		mov	r2, r0
 388 011a 07F11403 		add	r3, r7, #20
 389 011e 1146     		mov	r1, r2
 390 0120 1846     		mov	r0, r3
 391 0122 FFF7FEFF 		bl	CDC_Transmit_FS
 169:Core/Src/main.c ****           i=0;
 392              		.loc 1 169 12
 393 0126 0023     		movs	r3, #0
 394 0128 C7F83C34 		str	r3, [r7, #1084]
 170:Core/Src/main.c ****           break;
 395              		.loc 1 170 11
 396 012c A4E0     		b	.L18
 397              	.L16:
 398              	.LBE6:
 399              	.LBB7:
 171:Core/Src/main.c ****         }
 172:Core/Src/main.c ****             case 112: // 'P'
 173:Core/Src/main.c ****             case 37: // '%'
 174:Core/Src/main.c ****             {
 175:Core/Src/main.c ****                 // Configura o ADC para ler o canal do LDR (A0)
 176:Core/Src/main.c ****                 ADC1_Set_Channel(ADC_CHANNEL_0);
 400              		.loc 1 176 17
 401 012e 0020     		movs	r0, #0
 402 0130 FFF7FEFF 		bl	ADC1_Set_Channel
 177:Core/Src/main.c ****                 ADC1_Set_Channel(ADC_CHANNEL_0);
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 12


 403              		.loc 1 177 17
 404 0134 0020     		movs	r0, #0
 405 0136 FFF7FEFF 		bl	ADC1_Set_Channel
 178:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 406              		.loc 1 178 5
 407 013a 5748     		ldr	r0, .L22+20
 408 013c FFF7FEFF 		bl	HAL_ADC_Start
 179:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1,100);
 409              		.loc 1 179 5
 410 0140 6421     		movs	r1, #100
 411 0142 5548     		ldr	r0, .L22+20
 412 0144 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 180:Core/Src/main.c ****     read[0]=HAL_ADC_GetValue(&hadc1);
 413              		.loc 1 180 13
 414 0148 5348     		ldr	r0, .L22+20
 415 014a FFF7FEFF 		bl	HAL_ADC_GetValue
 416 014e 0346     		mov	r3, r0
 417              		.loc 1 180 12
 418 0150 C7F81034 		str	r3, [r7, #1040]
 181:Core/Src/main.c ****     for (i=0;i<5;i++){
 419              		.loc 1 181 11
 420 0154 0023     		movs	r3, #0
 421 0156 C7F83C34 		str	r3, [r7, #1084]
 422              		.loc 1 181 5
 423 015a 04E0     		b	.L19
 424              	.L20:
 425              		.loc 1 181 19 discriminator 3
 426 015c D7F83C34 		ldr	r3, [r7, #1084]
 427 0160 0133     		adds	r3, r3, #1
 428 0162 C7F83C34 		str	r3, [r7, #1084]
 429              	.L19:
 430              		.loc 1 181 15 discriminator 1
 431 0166 D7F83C34 		ldr	r3, [r7, #1084]
 432 016a 042B     		cmp	r3, #4
 433 016c F6DD     		ble	.L20
 182:Core/Src/main.c ****     }
 183:Core/Src/main.c ****     HAL_Delay(10); 
 434              		.loc 1 183 5
 435 016e 0A20     		movs	r0, #10
 436 0170 FFF7FEFF 		bl	HAL_Delay
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****                 // Inicia a conversão de A/D
 186:Core/Src/main.c ****                 HAL_ADC_Start(&hadc1);
 437              		.loc 1 186 17
 438 0174 4848     		ldr	r0, .L22+20
 439 0176 FFF7FEFF 		bl	HAL_ADC_Start
 187:Core/Src/main.c ****                 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 440              		.loc 1 187 17
 441 017a 4FF0FF31 		mov	r1, #-1
 442 017e 4648     		ldr	r0, .L22+20
 443 0180 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 188:Core/Src/main.c ****                 uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 444              		.loc 1 188 38
 445 0184 4448     		ldr	r0, .L22+20
 446 0186 FFF7FEFF 		bl	HAL_ADC_GetValue
 447 018a C7F83004 		str	r0, [r7, #1072]
 189:Core/Src/main.c **** 
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 13


 190:Core/Src/main.c ****                 // Calcula o percentual do fundo de escala
 191:Core/Src/main.c ****                 float percent_fundo_escala = ((float)adc_value / 4095) * 100.0;
 448              		.loc 1 191 47
 449 018e D7F83034 		ldr	r3, [r7, #1072]
 450 0192 07EE903A 		vmov	s15, r3	@ int
 451 0196 B8EE677A 		vcvt.f32.u32	s14, s15
 452              		.loc 1 191 64
 453 019a DFED406A 		vldr.32	s13, .L22+24
 454 019e C7EE267A 		vdiv.f32	s15, s14, s13
 455              		.loc 1 191 23
 456 01a2 9FED3F7A 		vldr.32	s14, .L22+28
 457 01a6 67EE877A 		vmul.f32	s15, s15, s14
 458 01aa 07F22C43 		addw	r3, r7, #1068
 459 01ae C3ED007A 		vstr.32	s15, [r3]
 192:Core/Src/main.c ****                 int percent_int = (int)percent_fundo_escala;
 460              		.loc 1 192 21
 461 01b2 07F22C43 		addw	r3, r7, #1068
 462 01b6 D3ED007A 		vldr.32	s15, [r3]
 463 01ba FDEEE77A 		vcvt.s32.f32	s15, s15
 464 01be 17EE903A 		vmov	r3, s15	@ int
 465 01c2 C7F82834 		str	r3, [r7, #1064]
 193:Core/Src/main.c ****                 int percent_frac = (int)((percent_fundo_escala - percent_int) * 100);
 466              		.loc 1 193 64
 467 01c6 D7F82834 		ldr	r3, [r7, #1064]
 468 01ca 07EE903A 		vmov	s15, r3	@ int
 469 01ce F8EEE77A 		vcvt.f32.s32	s15, s15
 470 01d2 07F22C43 		addw	r3, r7, #1068
 471 01d6 93ED007A 		vldr.32	s14, [r3]
 472 01da 77EE677A 		vsub.f32	s15, s14, s15
 473              		.loc 1 193 79
 474 01de 9FED307A 		vldr.32	s14, .L22+28
 475 01e2 67EE877A 		vmul.f32	s15, s15, s14
 476              		.loc 1 193 21
 477 01e6 FDEEE77A 		vcvt.s32.f32	s15, s15
 478 01ea 17EE903A 		vmov	r3, s15	@ int
 479 01ee C7F82434 		str	r3, [r7, #1060]
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****                 // Calcula a tensão em mV, assumindo que a referência é 3.3V
 196:Core/Src/main.c ****                 int tensao_mv = (adc_value * 3300) / 4095;
 480              		.loc 1 196 44
 481 01f2 D7F83034 		ldr	r3, [r7, #1072]
 482 01f6 40F6E442 		movw	r2, #3300
 483 01fa 03FB02F2 		mul	r2, r3, r2
 484              		.loc 1 196 52
 485 01fe 294B     		ldr	r3, .L22+32
 486 0200 A3FB0213 		umull	r1, r3, r3, r2
 487 0204 D21A     		subs	r2, r2, r3
 488 0206 5208     		lsrs	r2, r2, #1
 489 0208 1344     		add	r3, r3, r2
 490 020a DB0A     		lsrs	r3, r3, #11
 491              		.loc 1 196 21
 492 020c C7F82034 		str	r3, [r7, #1056]
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****                 sprintf(string, "O percentual do fundo de escala do A/D eh de %d.%02d%%, representa
 493              		.loc 1 198 17
 494 0210 07F11400 		add	r0, r7, #20
 495 0214 D7F82034 		ldr	r3, [r7, #1056]
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 14


 496 0218 0093     		str	r3, [sp]
 497 021a D7F82434 		ldr	r3, [r7, #1060]
 498 021e D7F82824 		ldr	r2, [r7, #1064]
 499 0222 2149     		ldr	r1, .L22+36
 500 0224 FFF7FEFF 		bl	sprintf
 199:Core/Src/main.c ****                 CDC_Transmit_FS(string, strlen(string));
 501              		.loc 1 199 17
 502 0228 07F11403 		add	r3, r7, #20
 503 022c 1846     		mov	r0, r3
 504 022e FFF7FEFF 		bl	strlen
 505 0232 0246     		mov	r2, r0
 506 0234 07F11403 		add	r3, r7, #20
 507 0238 1146     		mov	r1, r2
 508 023a 1846     		mov	r0, r3
 509 023c FFF7FEFF 		bl	CDC_Transmit_FS
 200:Core/Src/main.c ****                 i = 0;
 510              		.loc 1 200 19
 511 0240 0023     		movs	r3, #0
 512 0242 C7F83C34 		str	r3, [r7, #1084]
 201:Core/Src/main.c ****                 break;
 513              		.loc 1 201 17
 514 0246 17E0     		b	.L18
 515              	.L15:
 516              	.LBE7:
 517              	.LBB8:
 202:Core/Src/main.c ****             }
 203:Core/Src/main.c ****             default:
 204:Core/Src/main.c ****             {
 205:Core/Src/main.c ****                 sprintf(string, "comando nao reconhecido %d\r\n", gUSBRxBuffer[0]);
 518              		.loc 1 205 17
 519 0248 114B     		ldr	r3, .L22+12
 520 024a 1A68     		ldr	r2, [r3]
 521 024c 07F11403 		add	r3, r7, #20
 522 0250 1649     		ldr	r1, .L22+40
 523 0252 1846     		mov	r0, r3
 524 0254 FFF7FEFF 		bl	sprintf
 206:Core/Src/main.c ****                 CDC_Transmit_FS(string, strlen(string));
 525              		.loc 1 206 17
 526 0258 07F11403 		add	r3, r7, #20
 527 025c 1846     		mov	r0, r3
 528 025e FFF7FEFF 		bl	strlen
 529 0262 0246     		mov	r2, r0
 530 0264 07F11403 		add	r3, r7, #20
 531 0268 1146     		mov	r1, r2
 532 026a 1846     		mov	r0, r3
 533 026c FFF7FEFF 		bl	CDC_Transmit_FS
 207:Core/Src/main.c ****                 i = 0;
 534              		.loc 1 207 19
 535 0270 0023     		movs	r3, #0
 536 0272 C7F83C34 		str	r3, [r7, #1084]
 208:Core/Src/main.c ****                 break;
 537              		.loc 1 208 17
 538 0276 00BF     		nop
 539              	.L18:
 540              	.LBE8:
 209:Core/Src/main.c ****             }
 210:Core/Src/main.c ****         }
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 15


 211:Core/Src/main.c ****         memset(gUSBRxBuffer, 0, 255);
 541              		.loc 1 211 9
 542 0278 FF22     		movs	r2, #255
 543 027a 0021     		movs	r1, #0
 544 027c 0448     		ldr	r0, .L22+12
 545 027e FFF7FEFF 		bl	memset
 142:Core/Src/main.c ****     sprintf(string, "Digite um comando\r\n");
 546              		.loc 1 142 8
 547 0282 E7E6     		b	.L21
 548              	.L23:
 549              		.align	2
 550              	.L22:
 551 0284 808D5B00 		.word	6000000
 552 0288 00000000 		.word	htim4
 553 028c 00000000 		.word	.LC0
 554 0290 00000000 		.word	gUSBRxBuffer
 555 0294 14000000 		.word	.LC1
 556 0298 00000000 		.word	hadc1
 557 029c 00F07F45 		.word	1166012416
 558 02a0 0000C842 		.word	1120403456
 559 02a4 01011000 		.word	1048833
 560 02a8 38000000 		.word	.LC2
 561 02ac 94000000 		.word	.LC3
 562              		.cfi_endproc
 563              	.LFE220:
 565              		.section	.text.SystemClock_Config,"ax",%progbits
 566              		.align	1
 567              		.global	SystemClock_Config
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 572              	SystemClock_Config:
 573              	.LFB222:
 212:Core/Src/main.c ****     }
 213:Core/Src/main.c **** }  
 214:Core/Src/main.c **** }
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****     /* USER CODE END WHILE */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 219:Core/Src/main.c ****   
 220:Core/Src/main.c ****   /* USER CODE END 3 */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** 
 223:Core/Src/main.c **** /**
 224:Core/Src/main.c ****   * @brief System Clock Configuration
 225:Core/Src/main.c ****   * @retval None
 226:Core/Src/main.c ****   */
 227:Core/Src/main.c **** void SystemClock_Config(void)
 228:Core/Src/main.c **** {
 574              		.loc 1 228 1
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 80
 577              		@ frame_needed = 1, uses_anonymous_args = 0
 578 0000 80B5     		push	{r7, lr}
 579              	.LCFI8:
 580              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 16


 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 94B0     		sub	sp, sp, #80
 584              	.LCFI9:
 585              		.cfi_def_cfa_offset 88
 586 0004 00AF     		add	r7, sp, #0
 587              	.LCFI10:
 588              		.cfi_def_cfa_register 7
 229:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 589              		.loc 1 229 22
 590 0006 07F12003 		add	r3, r7, #32
 591 000a 3022     		movs	r2, #48
 592 000c 0021     		movs	r1, #0
 593 000e 1846     		mov	r0, r3
 594 0010 FFF7FEFF 		bl	memset
 230:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 595              		.loc 1 230 22
 596 0014 07F10C03 		add	r3, r7, #12
 597 0018 0022     		movs	r2, #0
 598 001a 1A60     		str	r2, [r3]
 599 001c 5A60     		str	r2, [r3, #4]
 600 001e 9A60     		str	r2, [r3, #8]
 601 0020 DA60     		str	r2, [r3, #12]
 602 0022 1A61     		str	r2, [r3, #16]
 603              	.LBB9:
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 233:Core/Src/main.c ****   */
 234:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 604              		.loc 1 234 3
 605 0024 0023     		movs	r3, #0
 606 0026 BB60     		str	r3, [r7, #8]
 607 0028 274B     		ldr	r3, .L28
 608 002a 1B6C     		ldr	r3, [r3, #64]
 609 002c 264A     		ldr	r2, .L28
 610 002e 43F08053 		orr	r3, r3, #268435456
 611 0032 1364     		str	r3, [r2, #64]
 612 0034 244B     		ldr	r3, .L28
 613 0036 1B6C     		ldr	r3, [r3, #64]
 614 0038 03F08053 		and	r3, r3, #268435456
 615 003c BB60     		str	r3, [r7, #8]
 616 003e BB68     		ldr	r3, [r7, #8]
 617              	.LBE9:
 618              	.LBB10:
 235:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 619              		.loc 1 235 3
 620 0040 0023     		movs	r3, #0
 621 0042 7B60     		str	r3, [r7, #4]
 622 0044 214B     		ldr	r3, .L28+4
 623 0046 1B68     		ldr	r3, [r3]
 624 0048 204A     		ldr	r2, .L28+4
 625 004a 43F44043 		orr	r3, r3, #49152
 626 004e 1360     		str	r3, [r2]
 627 0050 1E4B     		ldr	r3, .L28+4
 628 0052 1B68     		ldr	r3, [r3]
 629 0054 03F44043 		and	r3, r3, #49152
 630 0058 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 17


 631 005a 7B68     		ldr	r3, [r7, #4]
 632              	.LBE10:
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 238:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 239:Core/Src/main.c ****   */
 240:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 633              		.loc 1 240 36
 634 005c 0123     		movs	r3, #1
 635 005e 3B62     		str	r3, [r7, #32]
 241:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 636              		.loc 1 241 30
 637 0060 4FF48033 		mov	r3, #65536
 638 0064 7B62     		str	r3, [r7, #36]
 242:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 639              		.loc 1 242 34
 640 0066 0223     		movs	r3, #2
 641 0068 BB63     		str	r3, [r7, #56]
 243:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 642              		.loc 1 243 35
 643 006a 4FF48003 		mov	r3, #4194304
 644 006e FB63     		str	r3, [r7, #60]
 244:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 645              		.loc 1 244 30
 646 0070 1923     		movs	r3, #25
 647 0072 3B64     		str	r3, [r7, #64]
 245:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 648              		.loc 1 245 30
 649 0074 C023     		movs	r3, #192
 650 0076 7B64     		str	r3, [r7, #68]
 246:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 651              		.loc 1 246 30
 652 0078 0223     		movs	r3, #2
 653 007a BB64     		str	r3, [r7, #72]
 247:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 654              		.loc 1 247 30
 655 007c 0423     		movs	r3, #4
 656 007e FB64     		str	r3, [r7, #76]
 248:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 657              		.loc 1 248 7
 658 0080 07F12003 		add	r3, r7, #32
 659 0084 1846     		mov	r0, r3
 660 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 661 008a 0346     		mov	r3, r0
 662              		.loc 1 248 6
 663 008c 002B     		cmp	r3, #0
 664 008e 01D0     		beq	.L25
 249:Core/Src/main.c ****   {
 250:Core/Src/main.c ****     Error_Handler();
 665              		.loc 1 250 5
 666 0090 FFF7FEFF 		bl	Error_Handler
 667              	.L25:
 251:Core/Src/main.c ****   }
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 254:Core/Src/main.c ****   */
 255:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 18


 668              		.loc 1 255 31
 669 0094 0F23     		movs	r3, #15
 670 0096 FB60     		str	r3, [r7, #12]
 256:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 257:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 671              		.loc 1 257 34
 672 0098 0223     		movs	r3, #2
 673 009a 3B61     		str	r3, [r7, #16]
 258:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 674              		.loc 1 258 35
 675 009c 0023     		movs	r3, #0
 676 009e 7B61     		str	r3, [r7, #20]
 259:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 677              		.loc 1 259 36
 678 00a0 4FF48053 		mov	r3, #4096
 679 00a4 BB61     		str	r3, [r7, #24]
 260:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 680              		.loc 1 260 36
 681 00a6 0023     		movs	r3, #0
 682 00a8 FB61     		str	r3, [r7, #28]
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 683              		.loc 1 262 7
 684 00aa 07F10C03 		add	r3, r7, #12
 685 00ae 0321     		movs	r1, #3
 686 00b0 1846     		mov	r0, r3
 687 00b2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 688 00b6 0346     		mov	r3, r0
 689              		.loc 1 262 6
 690 00b8 002B     		cmp	r3, #0
 691 00ba 01D0     		beq	.L27
 263:Core/Src/main.c ****   {
 264:Core/Src/main.c ****     Error_Handler();
 692              		.loc 1 264 5
 693 00bc FFF7FEFF 		bl	Error_Handler
 694              	.L27:
 265:Core/Src/main.c ****   }
 266:Core/Src/main.c **** }
 695              		.loc 1 266 1
 696 00c0 00BF     		nop
 697 00c2 5037     		adds	r7, r7, #80
 698              	.LCFI11:
 699              		.cfi_def_cfa_offset 8
 700 00c4 BD46     		mov	sp, r7
 701              	.LCFI12:
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 00c6 80BD     		pop	{r7, pc}
 705              	.L29:
 706              		.align	2
 707              	.L28:
 708 00c8 00380240 		.word	1073887232
 709 00cc 00700040 		.word	1073770496
 710              		.cfi_endproc
 711              	.LFE222:
 713              		.section	.text.MX_ADC1_Init,"ax",%progbits
 714              		.align	1
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 19


 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	MX_ADC1_Init:
 720              	.LFB223:
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** /**
 269:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 270:Core/Src/main.c ****   * @param None
 271:Core/Src/main.c ****   * @retval None
 272:Core/Src/main.c ****   */
 273:Core/Src/main.c **** static void MX_ADC1_Init(void)
 274:Core/Src/main.c **** {
 721              		.loc 1 274 1
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 16
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725 0000 80B5     		push	{r7, lr}
 726              	.LCFI13:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 7, -8
 729              		.cfi_offset 14, -4
 730 0002 84B0     		sub	sp, sp, #16
 731              	.LCFI14:
 732              		.cfi_def_cfa_offset 24
 733 0004 00AF     		add	r7, sp, #0
 734              	.LCFI15:
 735              		.cfi_def_cfa_register 7
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 736              		.loc 1 280 26
 737 0006 3B46     		mov	r3, r7
 738 0008 0022     		movs	r2, #0
 739 000a 1A60     		str	r2, [r3]
 740 000c 5A60     		str	r2, [r3, #4]
 741 000e 9A60     		str	r2, [r3, #8]
 742 0010 DA60     		str	r2, [r3, #12]
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 287:Core/Src/main.c ****   */
 288:Core/Src/main.c ****   hadc1.Instance = ADC1;
 743              		.loc 1 288 18
 744 0012 214B     		ldr	r3, .L34
 745 0014 214A     		ldr	r2, .L34+4
 746 0016 1A60     		str	r2, [r3]
 289:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 747              		.loc 1 289 29
 748 0018 1F4B     		ldr	r3, .L34
 749 001a 4FF48032 		mov	r2, #65536
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 20


 750 001e 5A60     		str	r2, [r3, #4]
 290:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 751              		.loc 1 290 25
 752 0020 1D4B     		ldr	r3, .L34
 753 0022 0022     		movs	r2, #0
 754 0024 9A60     		str	r2, [r3, #8]
 291:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 755              		.loc 1 291 27
 756 0026 1C4B     		ldr	r3, .L34
 757 0028 0022     		movs	r2, #0
 758 002a 1A61     		str	r2, [r3, #16]
 292:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 759              		.loc 1 292 33
 760 002c 1A4B     		ldr	r3, .L34
 761 002e 0022     		movs	r2, #0
 762 0030 1A76     		strb	r2, [r3, #24]
 293:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 763              		.loc 1 293 36
 764 0032 194B     		ldr	r3, .L34
 765 0034 0022     		movs	r2, #0
 766 0036 83F82020 		strb	r2, [r3, #32]
 294:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 767              		.loc 1 294 35
 768 003a 174B     		ldr	r3, .L34
 769 003c 0022     		movs	r2, #0
 770 003e DA62     		str	r2, [r3, #44]
 295:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 771              		.loc 1 295 31
 772 0040 154B     		ldr	r3, .L34
 773 0042 174A     		ldr	r2, .L34+8
 774 0044 9A62     		str	r2, [r3, #40]
 296:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 775              		.loc 1 296 24
 776 0046 144B     		ldr	r3, .L34
 777 0048 0022     		movs	r2, #0
 778 004a DA60     		str	r2, [r3, #12]
 297:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 779              		.loc 1 297 30
 780 004c 124B     		ldr	r3, .L34
 781 004e 0122     		movs	r2, #1
 782 0050 DA61     		str	r2, [r3, #28]
 298:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 783              		.loc 1 298 36
 784 0052 114B     		ldr	r3, .L34
 785 0054 0022     		movs	r2, #0
 786 0056 83F83020 		strb	r2, [r3, #48]
 299:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 787              		.loc 1 299 27
 788 005a 0F4B     		ldr	r3, .L34
 789 005c 0122     		movs	r2, #1
 790 005e 5A61     		str	r2, [r3, #20]
 300:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 791              		.loc 1 300 7
 792 0060 0D48     		ldr	r0, .L34
 793 0062 FFF7FEFF 		bl	HAL_ADC_Init
 794 0066 0346     		mov	r3, r0
 795              		.loc 1 300 6
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 21


 796 0068 002B     		cmp	r3, #0
 797 006a 01D0     		beq	.L31
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 798              		.loc 1 302 5
 799 006c FFF7FEFF 		bl	Error_Handler
 800              	.L31:
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 306:Core/Src/main.c ****   */
 307:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 801              		.loc 1 307 19
 802 0070 0023     		movs	r3, #0
 803 0072 3B60     		str	r3, [r7]
 308:Core/Src/main.c ****   sConfig.Rank = 1;
 804              		.loc 1 308 16
 805 0074 0123     		movs	r3, #1
 806 0076 7B60     		str	r3, [r7, #4]
 309:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 807              		.loc 1 309 24
 808 0078 0023     		movs	r3, #0
 809 007a BB60     		str	r3, [r7, #8]
 310:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810              		.loc 1 310 7
 811 007c 3B46     		mov	r3, r7
 812 007e 1946     		mov	r1, r3
 813 0080 0548     		ldr	r0, .L34
 814 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 815 0086 0346     		mov	r3, r0
 816              		.loc 1 310 6
 817 0088 002B     		cmp	r3, #0
 818 008a 01D0     		beq	.L33
 311:Core/Src/main.c ****   {
 312:Core/Src/main.c ****     Error_Handler();
 819              		.loc 1 312 5
 820 008c FFF7FEFF 		bl	Error_Handler
 821              	.L33:
 313:Core/Src/main.c ****   }
 314:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 317:Core/Src/main.c **** 
 318:Core/Src/main.c **** }
 822              		.loc 1 318 1
 823 0090 00BF     		nop
 824 0092 1037     		adds	r7, r7, #16
 825              	.LCFI16:
 826              		.cfi_def_cfa_offset 8
 827 0094 BD46     		mov	sp, r7
 828              	.LCFI17:
 829              		.cfi_def_cfa_register 13
 830              		@ sp needed
 831 0096 80BD     		pop	{r7, pc}
 832              	.L35:
 833              		.align	2
 834              	.L34:
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 22


 835 0098 00000000 		.word	hadc1
 836 009c 00200140 		.word	1073815552
 837 00a0 0100000F 		.word	251658241
 838              		.cfi_endproc
 839              	.LFE223:
 841              		.section	.text.MX_CRC_Init,"ax",%progbits
 842              		.align	1
 843              		.syntax unified
 844              		.thumb
 845              		.thumb_func
 847              	MX_CRC_Init:
 848              	.LFB224:
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** /**
 321:Core/Src/main.c ****   * @brief CRC Initialization Function
 322:Core/Src/main.c ****   * @param None
 323:Core/Src/main.c ****   * @retval None
 324:Core/Src/main.c ****   */
 325:Core/Src/main.c **** static void MX_CRC_Init(void)
 326:Core/Src/main.c **** {
 849              		.loc 1 326 1
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853 0000 80B5     		push	{r7, lr}
 854              	.LCFI18:
 855              		.cfi_def_cfa_offset 8
 856              		.cfi_offset 7, -8
 857              		.cfi_offset 14, -4
 858 0002 00AF     		add	r7, sp, #0
 859              	.LCFI19:
 860              		.cfi_def_cfa_register 7
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 0 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* USER CODE END CRC_Init 0 */
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 1 */
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   /* USER CODE END CRC_Init 1 */
 335:Core/Src/main.c ****   hcrc.Instance = CRC;
 861              		.loc 1 335 17
 862 0004 064B     		ldr	r3, .L39
 863 0006 074A     		ldr	r2, .L39+4
 864 0008 1A60     		str	r2, [r3]
 336:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 865              		.loc 1 336 7
 866 000a 0548     		ldr	r0, .L39
 867 000c FFF7FEFF 		bl	HAL_CRC_Init
 868 0010 0346     		mov	r3, r0
 869              		.loc 1 336 6
 870 0012 002B     		cmp	r3, #0
 871 0014 01D0     		beq	.L38
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****     Error_Handler();
 872              		.loc 1 338 5
 873 0016 FFF7FEFF 		bl	Error_Handler
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 23


 874              	.L38:
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 2 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* USER CODE END CRC_Init 2 */
 343:Core/Src/main.c **** 
 344:Core/Src/main.c **** }
 875              		.loc 1 344 1
 876 001a 00BF     		nop
 877 001c 80BD     		pop	{r7, pc}
 878              	.L40:
 879 001e 00BF     		.align	2
 880              	.L39:
 881 0020 00000000 		.word	hcrc
 882 0024 00300240 		.word	1073885184
 883              		.cfi_endproc
 884              	.LFE224:
 886              		.section	.text.MX_TIM4_Init,"ax",%progbits
 887              		.align	1
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 892              	MX_TIM4_Init:
 893              	.LFB225:
 345:Core/Src/main.c **** 
 346:Core/Src/main.c **** /**
 347:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 348:Core/Src/main.c ****   * @param None
 349:Core/Src/main.c ****   * @retval None
 350:Core/Src/main.c ****   */
 351:Core/Src/main.c **** static void MX_TIM4_Init(void)
 352:Core/Src/main.c **** {
 894              		.loc 1 352 1
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 56
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898 0000 80B5     		push	{r7, lr}
 899              	.LCFI20:
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 7, -8
 902              		.cfi_offset 14, -4
 903 0002 8EB0     		sub	sp, sp, #56
 904              	.LCFI21:
 905              		.cfi_def_cfa_offset 64
 906 0004 00AF     		add	r7, sp, #0
 907              	.LCFI22:
 908              		.cfi_def_cfa_register 7
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 909              		.loc 1 358 26
 910 0006 07F12803 		add	r3, r7, #40
 911 000a 0022     		movs	r2, #0
 912 000c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 24


 913 000e 5A60     		str	r2, [r3, #4]
 914 0010 9A60     		str	r2, [r3, #8]
 915 0012 DA60     		str	r2, [r3, #12]
 359:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 916              		.loc 1 359 27
 917 0014 07F12003 		add	r3, r7, #32
 918 0018 0022     		movs	r2, #0
 919 001a 1A60     		str	r2, [r3]
 920 001c 5A60     		str	r2, [r3, #4]
 360:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 921              		.loc 1 360 22
 922 001e 3B1D     		adds	r3, r7, #4
 923 0020 0022     		movs	r2, #0
 924 0022 1A60     		str	r2, [r3]
 925 0024 5A60     		str	r2, [r3, #4]
 926 0026 9A60     		str	r2, [r3, #8]
 927 0028 DA60     		str	r2, [r3, #12]
 928 002a 1A61     		str	r2, [r3, #16]
 929 002c 5A61     		str	r2, [r3, #20]
 930 002e 9A61     		str	r2, [r3, #24]
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 365:Core/Src/main.c ****   htim4.Instance = TIM4;
 931              		.loc 1 365 18
 932 0030 324B     		ldr	r3, .L48
 933 0032 334A     		ldr	r2, .L48+4
 934 0034 1A60     		str	r2, [r3]
 366:Core/Src/main.c ****   htim4.Init.Prescaler = 0;
 935              		.loc 1 366 24
 936 0036 314B     		ldr	r3, .L48
 937 0038 0022     		movs	r2, #0
 938 003a 5A60     		str	r2, [r3, #4]
 367:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 939              		.loc 1 367 26
 940 003c 2F4B     		ldr	r3, .L48
 941 003e 0022     		movs	r2, #0
 942 0040 9A60     		str	r2, [r3, #8]
 368:Core/Src/main.c ****   htim4.Init.Period = 11996;
 943              		.loc 1 368 21
 944 0042 2E4B     		ldr	r3, .L48
 945 0044 42F6DC62 		movw	r2, #11996
 946 0048 DA60     		str	r2, [r3, #12]
 369:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 947              		.loc 1 369 28
 948 004a 2C4B     		ldr	r3, .L48
 949 004c 0022     		movs	r2, #0
 950 004e 1A61     		str	r2, [r3, #16]
 370:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 951              		.loc 1 370 32
 952 0050 2A4B     		ldr	r3, .L48
 953 0052 0022     		movs	r2, #0
 954 0054 9A61     		str	r2, [r3, #24]
 371:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 955              		.loc 1 371 7
 956 0056 2948     		ldr	r0, .L48
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 25


 957 0058 FFF7FEFF 		bl	HAL_TIM_Base_Init
 958 005c 0346     		mov	r3, r0
 959              		.loc 1 371 6
 960 005e 002B     		cmp	r3, #0
 961 0060 01D0     		beq	.L42
 372:Core/Src/main.c ****   {
 373:Core/Src/main.c ****     Error_Handler();
 962              		.loc 1 373 5
 963 0062 FFF7FEFF 		bl	Error_Handler
 964              	.L42:
 374:Core/Src/main.c ****   }
 375:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 965              		.loc 1 375 34
 966 0066 4FF48053 		mov	r3, #4096
 967 006a BB62     		str	r3, [r7, #40]
 376:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 968              		.loc 1 376 7
 969 006c 07F12803 		add	r3, r7, #40
 970 0070 1946     		mov	r1, r3
 971 0072 2248     		ldr	r0, .L48
 972 0074 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 973 0078 0346     		mov	r3, r0
 974              		.loc 1 376 6
 975 007a 002B     		cmp	r3, #0
 976 007c 01D0     		beq	.L43
 377:Core/Src/main.c ****   {
 378:Core/Src/main.c ****     Error_Handler();
 977              		.loc 1 378 5
 978 007e FFF7FEFF 		bl	Error_Handler
 979              	.L43:
 379:Core/Src/main.c ****   }
 380:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 980              		.loc 1 380 7
 981 0082 1E48     		ldr	r0, .L48
 982 0084 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 983 0088 0346     		mov	r3, r0
 984              		.loc 1 380 6
 985 008a 002B     		cmp	r3, #0
 986 008c 01D0     		beq	.L44
 381:Core/Src/main.c ****   {
 382:Core/Src/main.c ****     Error_Handler();
 987              		.loc 1 382 5
 988 008e FFF7FEFF 		bl	Error_Handler
 989              	.L44:
 383:Core/Src/main.c ****   }
 384:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 990              		.loc 1 384 37
 991 0092 0023     		movs	r3, #0
 992 0094 3B62     		str	r3, [r7, #32]
 385:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 993              		.loc 1 385 33
 994 0096 0023     		movs	r3, #0
 995 0098 7B62     		str	r3, [r7, #36]
 386:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 996              		.loc 1 386 7
 997 009a 07F12003 		add	r3, r7, #32
 998 009e 1946     		mov	r1, r3
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 26


 999 00a0 1648     		ldr	r0, .L48
 1000 00a2 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1001 00a6 0346     		mov	r3, r0
 1002              		.loc 1 386 6
 1003 00a8 002B     		cmp	r3, #0
 1004 00aa 01D0     		beq	.L45
 387:Core/Src/main.c ****   {
 388:Core/Src/main.c ****     Error_Handler();
 1005              		.loc 1 388 5
 1006 00ac FFF7FEFF 		bl	Error_Handler
 1007              	.L45:
 389:Core/Src/main.c ****   }
 390:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 1008              		.loc 1 390 20
 1009 00b0 6023     		movs	r3, #96
 1010 00b2 7B60     		str	r3, [r7, #4]
 391:Core/Src/main.c ****   sConfigOC.Pulse = 750;
 1011              		.loc 1 391 19
 1012 00b4 40F2EE23 		movw	r3, #750
 1013 00b8 BB60     		str	r3, [r7, #8]
 392:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1014              		.loc 1 392 24
 1015 00ba 0023     		movs	r3, #0
 1016 00bc FB60     		str	r3, [r7, #12]
 393:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1017              		.loc 1 393 24
 1018 00be 0023     		movs	r3, #0
 1019 00c0 7B61     		str	r3, [r7, #20]
 394:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1020              		.loc 1 394 7
 1021 00c2 3B1D     		adds	r3, r7, #4
 1022 00c4 0022     		movs	r2, #0
 1023 00c6 1946     		mov	r1, r3
 1024 00c8 0C48     		ldr	r0, .L48
 1025 00ca FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1026 00ce 0346     		mov	r3, r0
 1027              		.loc 1 394 6
 1028 00d0 002B     		cmp	r3, #0
 1029 00d2 01D0     		beq	.L46
 395:Core/Src/main.c ****   {
 396:Core/Src/main.c ****     Error_Handler();
 1030              		.loc 1 396 5
 1031 00d4 FFF7FEFF 		bl	Error_Handler
 1032              	.L46:
 397:Core/Src/main.c ****   }
 398:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 1033              		.loc 1 398 7
 1034 00d8 3B1D     		adds	r3, r7, #4
 1035 00da 0422     		movs	r2, #4
 1036 00dc 1946     		mov	r1, r3
 1037 00de 0748     		ldr	r0, .L48
 1038 00e0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1039 00e4 0346     		mov	r3, r0
 1040              		.loc 1 398 6
 1041 00e6 002B     		cmp	r3, #0
 1042 00e8 01D0     		beq	.L47
 399:Core/Src/main.c ****   {
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 27


 400:Core/Src/main.c ****     Error_Handler();
 1043              		.loc 1 400 5
 1044 00ea FFF7FEFF 		bl	Error_Handler
 1045              	.L47:
 401:Core/Src/main.c ****   }
 402:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 405:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
 1046              		.loc 1 405 3
 1047 00ee 0348     		ldr	r0, .L48
 1048 00f0 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 406:Core/Src/main.c **** 
 407:Core/Src/main.c **** }
 1049              		.loc 1 407 1
 1050 00f4 00BF     		nop
 1051 00f6 3837     		adds	r7, r7, #56
 1052              	.LCFI23:
 1053              		.cfi_def_cfa_offset 8
 1054 00f8 BD46     		mov	sp, r7
 1055              	.LCFI24:
 1056              		.cfi_def_cfa_register 13
 1057              		@ sp needed
 1058 00fa 80BD     		pop	{r7, pc}
 1059              	.L49:
 1060              		.align	2
 1061              	.L48:
 1062 00fc 00000000 		.word	htim4
 1063 0100 00080040 		.word	1073743872
 1064              		.cfi_endproc
 1065              	.LFE225:
 1067              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1068              		.align	1
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1073              	MX_GPIO_Init:
 1074              	.LFB226:
 408:Core/Src/main.c **** 
 409:Core/Src/main.c **** /**
 410:Core/Src/main.c ****   * @brief GPIO Initialization Function
 411:Core/Src/main.c ****   * @param None
 412:Core/Src/main.c ****   * @retval None
 413:Core/Src/main.c ****   */
 414:Core/Src/main.c **** static void MX_GPIO_Init(void)
 415:Core/Src/main.c **** {
 1075              		.loc 1 415 1
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 40
 1078              		@ frame_needed = 1, uses_anonymous_args = 0
 1079 0000 80B5     		push	{r7, lr}
 1080              	.LCFI25:
 1081              		.cfi_def_cfa_offset 8
 1082              		.cfi_offset 7, -8
 1083              		.cfi_offset 14, -4
 1084 0002 8AB0     		sub	sp, sp, #40
 1085              	.LCFI26:
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 28


 1086              		.cfi_def_cfa_offset 48
 1087 0004 00AF     		add	r7, sp, #0
 1088              	.LCFI27:
 1089              		.cfi_def_cfa_register 7
 416:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1090              		.loc 1 416 20
 1091 0006 07F11403 		add	r3, r7, #20
 1092 000a 0022     		movs	r2, #0
 1093 000c 1A60     		str	r2, [r3]
 1094 000e 5A60     		str	r2, [r3, #4]
 1095 0010 9A60     		str	r2, [r3, #8]
 1096 0012 DA60     		str	r2, [r3, #12]
 1097 0014 1A61     		str	r2, [r3, #16]
 1098              	.LBB11:
 417:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 418:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 421:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1099              		.loc 1 421 3
 1100 0016 0023     		movs	r3, #0
 1101 0018 3B61     		str	r3, [r7, #16]
 1102 001a 314B     		ldr	r3, .L51
 1103 001c 1B6B     		ldr	r3, [r3, #48]
 1104 001e 304A     		ldr	r2, .L51
 1105 0020 43F00403 		orr	r3, r3, #4
 1106 0024 1363     		str	r3, [r2, #48]
 1107 0026 2E4B     		ldr	r3, .L51
 1108 0028 1B6B     		ldr	r3, [r3, #48]
 1109 002a 03F00403 		and	r3, r3, #4
 1110 002e 3B61     		str	r3, [r7, #16]
 1111 0030 3B69     		ldr	r3, [r7, #16]
 1112              	.LBE11:
 1113              	.LBB12:
 422:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1114              		.loc 1 422 3
 1115 0032 0023     		movs	r3, #0
 1116 0034 FB60     		str	r3, [r7, #12]
 1117 0036 2A4B     		ldr	r3, .L51
 1118 0038 1B6B     		ldr	r3, [r3, #48]
 1119 003a 294A     		ldr	r2, .L51
 1120 003c 43F08003 		orr	r3, r3, #128
 1121 0040 1363     		str	r3, [r2, #48]
 1122 0042 274B     		ldr	r3, .L51
 1123 0044 1B6B     		ldr	r3, [r3, #48]
 1124 0046 03F08003 		and	r3, r3, #128
 1125 004a FB60     		str	r3, [r7, #12]
 1126 004c FB68     		ldr	r3, [r7, #12]
 1127              	.LBE12:
 1128              	.LBB13:
 423:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1129              		.loc 1 423 3
 1130 004e 0023     		movs	r3, #0
 1131 0050 BB60     		str	r3, [r7, #8]
 1132 0052 234B     		ldr	r3, .L51
 1133 0054 1B6B     		ldr	r3, [r3, #48]
 1134 0056 224A     		ldr	r2, .L51
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 29


 1135 0058 43F00103 		orr	r3, r3, #1
 1136 005c 1363     		str	r3, [r2, #48]
 1137 005e 204B     		ldr	r3, .L51
 1138 0060 1B6B     		ldr	r3, [r3, #48]
 1139 0062 03F00103 		and	r3, r3, #1
 1140 0066 BB60     		str	r3, [r7, #8]
 1141 0068 BB68     		ldr	r3, [r7, #8]
 1142              	.LBE13:
 1143              	.LBB14:
 424:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1144              		.loc 1 424 3
 1145 006a 0023     		movs	r3, #0
 1146 006c 7B60     		str	r3, [r7, #4]
 1147 006e 1C4B     		ldr	r3, .L51
 1148 0070 1B6B     		ldr	r3, [r3, #48]
 1149 0072 1B4A     		ldr	r2, .L51
 1150 0074 43F00203 		orr	r3, r3, #2
 1151 0078 1363     		str	r3, [r2, #48]
 1152 007a 194B     		ldr	r3, .L51
 1153 007c 1B6B     		ldr	r3, [r3, #48]
 1154 007e 03F00203 		and	r3, r3, #2
 1155 0082 7B60     		str	r3, [r7, #4]
 1156 0084 7B68     		ldr	r3, [r7, #4]
 1157              	.LBE14:
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 427:Core/Src/main.c ****   HAL_GPIO_WritePin(KIT_LED_GPIO_Port, KIT_LED_Pin, GPIO_PIN_RESET);
 1158              		.loc 1 427 3
 1159 0086 0022     		movs	r2, #0
 1160 0088 4FF40051 		mov	r1, #8192
 1161 008c 1548     		ldr	r0, .L51+4
 1162 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 430:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, led_red_Pin|led_yellow_Pin|led_green_Pin|led_blue_Pin
 1163              		.loc 1 430 3
 1164 0092 0022     		movs	r2, #0
 1165 0094 7C21     		movs	r1, #124
 1166 0096 1448     		ldr	r0, .L51+8
 1167 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 431:Core/Src/main.c ****                           |led_white_Pin, GPIO_PIN_RESET);
 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   /*Configure GPIO pin : KIT_LED_Pin */
 434:Core/Src/main.c ****   GPIO_InitStruct.Pin = KIT_LED_Pin;
 1168              		.loc 1 434 23
 1169 009c 4FF40053 		mov	r3, #8192
 1170 00a0 7B61     		str	r3, [r7, #20]
 435:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1171              		.loc 1 435 24
 1172 00a2 0123     		movs	r3, #1
 1173 00a4 BB61     		str	r3, [r7, #24]
 436:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1174              		.loc 1 436 24
 1175 00a6 0023     		movs	r3, #0
 1176 00a8 FB61     		str	r3, [r7, #28]
 437:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1177              		.loc 1 437 25
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 30


 1178 00aa 0023     		movs	r3, #0
 1179 00ac 3B62     		str	r3, [r7, #32]
 438:Core/Src/main.c ****   HAL_GPIO_Init(KIT_LED_GPIO_Port, &GPIO_InitStruct);
 1180              		.loc 1 438 3
 1181 00ae 07F11403 		add	r3, r7, #20
 1182 00b2 1946     		mov	r1, r3
 1183 00b4 0B48     		ldr	r0, .L51+4
 1184 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****   /*Configure GPIO pins : led_red_Pin led_yellow_Pin led_green_Pin led_blue_Pin
 441:Core/Src/main.c ****                            led_white_Pin */
 442:Core/Src/main.c ****   GPIO_InitStruct.Pin = led_red_Pin|led_yellow_Pin|led_green_Pin|led_blue_Pin
 1185              		.loc 1 442 23
 1186 00ba 7C23     		movs	r3, #124
 1187 00bc 7B61     		str	r3, [r7, #20]
 443:Core/Src/main.c ****                           |led_white_Pin;
 444:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1188              		.loc 1 444 24
 1189 00be 0123     		movs	r3, #1
 1190 00c0 BB61     		str	r3, [r7, #24]
 445:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1191              		.loc 1 445 24
 1192 00c2 0023     		movs	r3, #0
 1193 00c4 FB61     		str	r3, [r7, #28]
 446:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1194              		.loc 1 446 25
 1195 00c6 0023     		movs	r3, #0
 1196 00c8 3B62     		str	r3, [r7, #32]
 447:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1197              		.loc 1 447 3
 1198 00ca 07F11403 		add	r3, r7, #20
 1199 00ce 1946     		mov	r1, r3
 1200 00d0 0548     		ldr	r0, .L51+8
 1201 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 448:Core/Src/main.c **** 
 449:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 450:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 451:Core/Src/main.c **** }
 1202              		.loc 1 451 1
 1203 00d6 00BF     		nop
 1204 00d8 2837     		adds	r7, r7, #40
 1205              	.LCFI28:
 1206              		.cfi_def_cfa_offset 8
 1207 00da BD46     		mov	sp, r7
 1208              	.LCFI29:
 1209              		.cfi_def_cfa_register 13
 1210              		@ sp needed
 1211 00dc 80BD     		pop	{r7, pc}
 1212              	.L52:
 1213 00de 00BF     		.align	2
 1214              	.L51:
 1215 00e0 00380240 		.word	1073887232
 1216 00e4 00080240 		.word	1073874944
 1217 00e8 00000240 		.word	1073872896
 1218              		.cfi_endproc
 1219              	.LFE226:
 1221              		.section	.text.ADC1_Set_Channel,"ax",%progbits
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 31


 1222              		.align	1
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1227              	ADC1_Set_Channel:
 1228              	.LFB227:
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 454:Core/Src/main.c **** 
 455:Core/Src/main.c **** static void ADC1_Set_Channel(uint32_t channel)
 456:Core/Src/main.c **** {
 1229              		.loc 1 456 1
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 24
 1232              		@ frame_needed = 1, uses_anonymous_args = 0
 1233 0000 80B5     		push	{r7, lr}
 1234              	.LCFI30:
 1235              		.cfi_def_cfa_offset 8
 1236              		.cfi_offset 7, -8
 1237              		.cfi_offset 14, -4
 1238 0002 86B0     		sub	sp, sp, #24
 1239              	.LCFI31:
 1240              		.cfi_def_cfa_offset 32
 1241 0004 00AF     		add	r7, sp, #0
 1242              	.LCFI32:
 1243              		.cfi_def_cfa_register 7
 1244 0006 7860     		str	r0, [r7, #4]
 457:Core/Src/main.c **** 
 458:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 1245              		.loc 1 462 26
 1246 0008 07F10803 		add	r3, r7, #8
 1247 000c 0022     		movs	r2, #0
 1248 000e 1A60     		str	r2, [r3]
 1249 0010 5A60     		str	r2, [r3, #4]
 1250 0012 9A60     		str	r2, [r3, #8]
 1251 0014 DA60     		str	r2, [r3, #12]
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 469:Core/Src/main.c ****   */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 472:Core/Src/main.c ****   */
 473:Core/Src/main.c ****   sConfig.Channel = channel;
 1252              		.loc 1 473 19
 1253 0016 7B68     		ldr	r3, [r7, #4]
 1254 0018 BB60     		str	r3, [r7, #8]
 474:Core/Src/main.c ****   sConfig.Rank = 1;
 1255              		.loc 1 474 16
 1256 001a 0123     		movs	r3, #1
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 32


 1257 001c FB60     		str	r3, [r7, #12]
 475:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1258              		.loc 1 475 24
 1259 001e 0023     		movs	r3, #0
 1260 0020 3B61     		str	r3, [r7, #16]
 476:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1261              		.loc 1 476 7
 1262 0022 07F10803 		add	r3, r7, #8
 1263 0026 1946     		mov	r1, r3
 1264 0028 0548     		ldr	r0, .L56
 1265 002a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1266 002e 0346     		mov	r3, r0
 1267              		.loc 1 476 6
 1268 0030 002B     		cmp	r3, #0
 1269 0032 01D0     		beq	.L55
 477:Core/Src/main.c ****   {
 478:Core/Src/main.c ****     Error_Handler();
 1270              		.loc 1 478 5
 1271 0034 FFF7FEFF 		bl	Error_Handler
 1272              	.L55:
 479:Core/Src/main.c ****   }
 480:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** }
 1273              		.loc 1 484 1
 1274 0038 00BF     		nop
 1275 003a 1837     		adds	r7, r7, #24
 1276              	.LCFI33:
 1277              		.cfi_def_cfa_offset 8
 1278 003c BD46     		mov	sp, r7
 1279              	.LCFI34:
 1280              		.cfi_def_cfa_register 13
 1281              		@ sp needed
 1282 003e 80BD     		pop	{r7, pc}
 1283              	.L57:
 1284              		.align	2
 1285              	.L56:
 1286 0040 00000000 		.word	hadc1
 1287              		.cfi_endproc
 1288              	.LFE227:
 1290              		.section	.text.Error_Handler,"ax",%progbits
 1291              		.align	1
 1292              		.global	Error_Handler
 1293              		.syntax unified
 1294              		.thumb
 1295              		.thumb_func
 1297              	Error_Handler:
 1298              	.LFB228:
 485:Core/Src/main.c **** /* USER CODE END 4 */
 486:Core/Src/main.c **** 
 487:Core/Src/main.c **** /**
 488:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 489:Core/Src/main.c ****   * @retval None
 490:Core/Src/main.c ****   */
 491:Core/Src/main.c **** void Error_Handler(void)
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 33


 492:Core/Src/main.c **** {
 1299              		.loc 1 492 1
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 1, uses_anonymous_args = 0
 1303              		@ link register save eliminated.
 1304 0000 80B4     		push	{r7}
 1305              	.LCFI35:
 1306              		.cfi_def_cfa_offset 4
 1307              		.cfi_offset 7, -4
 1308 0002 00AF     		add	r7, sp, #0
 1309              	.LCFI36:
 1310              		.cfi_def_cfa_register 7
 1311              	.LBB15:
 1312              	.LBB16:
 1313              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 34


  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 35


  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1314              		.loc 2 142 3
 1315              		.syntax unified
 1316              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1317 0004 72B6     		cpsid i
 1318              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1319              		.loc 2 143 1
 1320              		.thumb
 1321              		.syntax unified
 1322 0006 00BF     		nop
 1323              	.L59:
 1324              	.LBE16:
 1325              	.LBE15:
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 36


 493:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 494:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 495:Core/Src/main.c ****   __disable_irq();
 496:Core/Src/main.c ****   while (1)
 1326              		.loc 1 496 9 discriminator 1
 1327 0008 FEE7     		b	.L59
 1328              		.cfi_endproc
 1329              	.LFE228:
 1331              		.text
 1332              	.Letext0:
 1333              		.file 3 "c:\\users\\isabe\\onedrive\\documentos\\faculdade\\microcontrolados\\tools\\tools\\arm-gn
 1334              		.file 4 "c:\\users\\isabe\\onedrive\\documentos\\faculdade\\microcontrolados\\tools\\tools\\arm-gn
 1335              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1336              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1337              		.file 7 "c:\\users\\isabe\\onedrive\\documentos\\faculdade\\microcontrolados\\tools\\tools\\arm-gn
 1338              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1339              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1340              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1341              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1342              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1343              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1344              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_crc.h"
 1345              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1346              		.file 16 "Core/Inc/main.h"
 1347              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1348              		.file 18 "c:\\users\\isabe\\onedrive\\documentos\\faculdade\\microcontrolados\\tools\\tools\\arm-g
 1349              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1350              		.file 20 "c:\\users\\isabe\\onedrive\\documentos\\faculdade\\microcontrolados\\tools\\tools\\arm-g
 1351              		.file 21 "USB_DEVICE/App/usb_device.h"
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 37


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:24     .bss.hadc1:00000000 hadc1
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:21     .bss.hadc1:00000000 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:31     .bss.hcrc:00000000 hcrc
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:28     .bss.hcrc:00000000 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:38     .bss.htim4:00000000 htim4
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:35     .bss.htim4:00000000 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:45     .bss.gUSBRxBuffer:00000000 gUSBRxBuffer
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:42     .bss.gUSBRxBuffer:00000000 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:51     .text.ajuste.0:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:56     .text.ajuste.0:00000000 ajuste.0
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:212    .text.ajuste.0:00000118 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:219    .rodata:00000000 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:233    .text.main:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:239    .text.main:00000000 main
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:572    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1073   .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:719    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:847    .text.MX_CRC_Init:00000000 MX_CRC_Init
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:892    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1227   .text.ADC1_Set_Channel:00000000 ADC1_Set_Channel
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:551    .text.main:00000284 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:566    .text.SystemClock_Config:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1297   .text.Error_Handler:00000000 Error_Handler
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:708    .text.SystemClock_Config:000000c8 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:714    .text.MX_ADC1_Init:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:835    .text.MX_ADC1_Init:00000098 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:842    .text.MX_CRC_Init:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:881    .text.MX_CRC_Init:00000020 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:887    .text.MX_TIM4_Init:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1062   .text.MX_TIM4_Init:000000fc $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1068   .text.MX_GPIO_Init:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1215   .text.MX_GPIO_Init:000000e0 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1222   .text.ADC1_Set_Channel:00000000 $t
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1286   .text.ADC1_Set_Channel:00000040 $d
C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s:1291   .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_dmul
__aeabi_d2f
HAL_Init
MX_USB_DEVICE_Init
HAL_TIM_PWM_Start
sprintf
strlen
CDC_Transmit_FS
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
ARM GAS  C:\Users\isabe\AppData\Local\Temp\ccXlkGCN.s 			page 38


HAL_CRC_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_GPIO_WritePin
HAL_GPIO_Init
